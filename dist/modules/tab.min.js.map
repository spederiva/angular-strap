{"version":3,"sources":["modules/tab.js"],"names":["angular","controller","provider","$scope","$element","defaults","this","self","$options","forEach","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","isUndefined","$active","key","$attrs","$navClass","$remove","index","active","activeIndex","indexOf","splice","map","$setActive","length","value","name","fn","$pane","$get","$tab","scope","require","transclude","directive","templateUrl","attr","template","link","postLink","ngModelCtrl","bsTabsCtrl","$setViewValue","$formatters","push","attrs","modelValue","bsActivePane","parsedBsActivePane","assign","$parse","$watch","newValue","oldValue","controllers","$window","$animate","$sce","$observe","trustAsHtml","render","isActive","$isActive","element","animation","addClass","cssIcons","disabled"],"mappings":"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","file":"modules/tab.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      transclude: true,\n      template: '<ng-transclude ng-if=\"isActive\"></ng-transclude>',\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          if (attrs.cssIcons) {\n            newValue = '<i class=\"' + attrs.cssIcons + '\"></i> ' + newValue;\n          }\n\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        scope.isActive = false;\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n\n          scope.isActive = bsTabsCtrl.$isActive(scope, index);\n\n          $animate[scope.isActive ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}