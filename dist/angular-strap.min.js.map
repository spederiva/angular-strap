{"version":3,"sources":["angular-strap.js","timepicker/timepicker.js","helpers/compiler.js","dropdown/dropdown.js","typeahead/typeahead.js","tooltip/tooltip.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["placement","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","container","provider","keyboard","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$get","$timepicker","$tooltip","config","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","focus","_init","init","parentScope","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","index","$moveIndex","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","$setViewValue","$timeout","keep","hide","Date","setHours","setMinutes","setSeconds","$render","midIndex","parseInt","hours","push","disabled","label","selected","i","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","$onMouseDown","evt","target","nodeName","stopPropagation","targetEl","triggerHandler","preventDefault","isTouch","$onKeyDown","test","keyCode","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","$digest","createTextRange","prop","attr","_destroy","destroy","off","_show","show","_hide","$element","blur","directive","$options","require","restrict","$window","navigator","userAgent","falseValueRegExp","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","isDefined","timepicker","newValue","oldValue","$watch","bsShow","match","dateParser","$dateParser","validateAgainstMinMaxTime","ngModel","update","timezoneOffsetAdjust","$formatters","modelValue","NaN","parse","$on","trigger","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","$resetMatches","$rootScope","$$rAF","$matches","$$postDigest","$scope","activate","$activeIndex","$select","matches","$isVisible","safeDigest","$emit","prefixEvent","equals","$$phase","$root","TypeaheadFactory","array","isFunction","$filter","expression","results","postLink","bsOptions","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","slice","val","toString","titleTemplate","title","type","autoClose","bsEnabled","viewport","selector","padding","TooltipFactory","$new","split","enterAnimateCallback","leaveAnimateCallback","_tipToHide","destroyTipElement","triggers","on","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","documentElement","scrollTop","body","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","setOffset","using","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","timeout","$isShown","tipScope","$destroy","$promise","$bsCompiler","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","hoverState","compileData","promise","tipContainer","bindTriggerEvents","isElement","parent","after","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","leave","_blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","tooltip","transclusion","dataTarget","hasOwnProperty","$observe","bsTooltip","setViewport","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","isActive","$isActive","cssIcons","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$getIndex","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","$show","bottom","destroyModalElement","z-index","backdropBaseZindex","customClass","minor","backdropAnimation","bindBackdropEvents","defaultPrevented","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","bsDropdown","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","bind","toggleClass","$eval","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      transclude: true,\n      template: '<ng-transclude ng-if=\"isActive\"></ng-transclude>',\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          if (attrs.cssIcons) {\n            newValue = '<i class=\"' + attrs.cssIcons + '\"></i> ' + newValue;\n          }\n\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        scope.isActive = false;\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n\n          scope.isActive = bsTabsCtrl.$isActive(scope, index);\n\n          $animate[scope.isActive ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (options.backdrop) {\n            // decrement number of modals\n            backdropCount--;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      transclude: true,\n      template: '<ng-transclude ng-if=\"isActive\"></ng-transclude>',\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          if (attrs.cssIcons) {\n            newValue = '<i class=\"' + attrs.cssIcons + '\"></i> ' + newValue;\n          }\n\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        scope.isActive = false;\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n\n          scope.isActive = bsTabsCtrl.$isActive(scope, index);\n\n          $animate[scope.isActive ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (options.backdrop) {\n            // decrement number of modals\n            backdropCount--;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}